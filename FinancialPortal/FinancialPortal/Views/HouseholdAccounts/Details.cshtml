@model FinancialPortal.Models.HouseholdAccount

@{
    ViewBag.Title = "Details";
}
<br />
<br />
<br />
<h2>Account</h2>


<div class="col-md-8">
    <div class="row">
        <br />
        <br />
        <br />
        <div class="well">
            <h4>Household Account</h4>
            <hr />
            <dl class="dl-horizontal">
                <dt>
                    Household 
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Household.Name)
                </dd>

                <dt>
                    Account
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Name)
                </dd>
            </dl>
        </div>
    </div>
    </div>

    

<div class="col-md-4">
    <div class="header">
        <div class="pull-right actions">
        </div>
        <h3>Account Balance</h3>
    </div>
    <div class="content">
        <div class="well">
            <div class="icon"><i class="fa fa-server"><strong>  Balance: $ @Model.Balance</strong></i></div>
            <strong></strong>
        </div>
        <div class="well">
            <div class="icon"><i class="fa fa-line-chart"><strong>  Reconciled Balance : $ @Model.ReconciledBalance</strong></i></div>
    </div>
</div>
    </div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<h2>Transactions</h2>



<table id="thistable" class="table">
    <thead>
        <tr>
            <th>
                Description
            </th>
            <th>
                Category
            </th>
            <th>
                Account
            </th>
            <th>
                Ammount
            </th>
            <th>
                Reconciled Ammount
            </th>
            <th>
                Date
            </th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Transactions)
        {
            <tr>
                <td>
                    @Html.ActionLink(item.Description, "Edit", "Transactions", new { accountId = item.AccountId, id = item.Id }, null)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AccountId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReconciledAmount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
            </tr>

        }
    </tbody>


</table>

<p>
    <a href="@Url.RouteUrl("TransactionCreate", new { accountId = Model.Id })">Create New</a>
</p>


<canvas id="myChart" width="800" height="400"></canvas>


@section scripts
{
    <script>

        $('#thistable').dataTable();

    </script>

    
  

    <script>



        $.post("@Url.Action("GetChartData", "HouseholdAccounts")").then(function (response)
        {
            var ctx = $("#myChart").get(0).getContext("2d");


            var data = {
                labels: [],
                datasets: [
                    {
                        label: "BudgetAmount",
                        fillColor: "rgba(220,220,220,0.5)",
                        strokeColor: "rgba(220,220,220,0.8)",
                        highlightFill: "rgba(220,220,220,0.75)",
                        highlightStroke: "rgba(220,220,220,1)",
                        data: []
                    },
                    {
                        label: "ActualAmount",
                        fillColor: "rgba(151,187,205,0.5)",
                        strokeColor: "rgba(151,187,205,0.8)",
                        highlightFill: "rgba(151,187,205,0.75)",
                        highlightStroke: "rgba(151,187,205,1)",
                        data: []
                    }
                ]

            };

            for (i = 0; i < response.length; i++) 
            {
                data.labels.push( response[i].Name );
                data.datasets[0].data.push(response[i].BudgetAmount);
                data.datasets[1].data.push(response[i].ActualAmount);
            }

            console.log(data)

            Chart.defaults.global.scaleFontColor="black";           
            var myBarChart = new Chart(ctx).Bar(data, responsive = true);
            myBarChart.update();

        })
      


       
    </script>

}